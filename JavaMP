1.
public class Main {

    public static int factorial(int x) {
        if (x == 0) {
            return 1;
        } else {
            return x * factorial(x - 1);
        }
    }

    public static void main(String[] args) {
        int x = 5;

        int result = factorial(x);
        System.out.println("Факториал числа " + x + " = " + result);
    }
}

2.
public class Main {

    public static int second_count(int days, int hours, int minutes, int seconds) {
        int secondsCount = 0;

        secondsCount += days * 24 * 60 * 60;
        secondsCount += hours * 60 * 60;
        secondsCount += minutes * 60;
        secondsCount += seconds;

        return secondsCount;
    }

    public static void main(String[] args) {
        int days = 2;
        int hours = 13;
        int minutes = 45;
        int seconds = 30;

        int totalSeconds = second_count(days, hours, minutes, seconds);
        System.out.println("Количество секунд: " + totalSeconds);
    }
}

3.
public class Main {
    public static int find_line7(int[][] matrix) {
        for (int i = 0; i < matrix.length; i++) {
            int sum = 0;
            for (int j = 0; j < matrix[i].length; j++) {
                sum += matrix[i][j];
            }
            if (sum % 7 == 0) {
                return i;
            }
        }
        return -1;
    }
    
    public static void main(String[] args) {
        int[][] matrix = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };
        int index = find_line7(matrix);
        System.out.println("Индекс первой строки с суммой кратной 7: " + index);
    }
}

4.

public class Main {
    public static void main(String[] args) {
        king_step(1, 1, 3, 3);
    }

    public static void king_step(int kingRow, int kingCol, int figureRow, int figureCol) {
        if (!isValidCoordinate(kingRow, kingCol) || !isValidCoordinate(figureRow, figureCol)) {
            System.out.println("1");
            return;
        }

        if (kingRow == figureRow && kingCol == figureCol) {
            System.out.println("3");
            return;
        }

        if (Math.abs(kingRow - figureRow) <= 1 && Math.abs(kingCol - figureCol) <= 1) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }

    public static boolean isValidCoordinate(int row, int col) {
        return row >= 1 && row <= 8 && col >= 1 && col <= 8;
    }
}

6.
import java.util.Scanner;

public class PolygonArea {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        int n = scanner.nextInt();
        int[] x = new int[n];
        int[] y = new int[n];
        
        for (int i = 0; i < n; i++) {
            x[i] = scanner.nextInt();
            y[i] = scanner.nextInt();
        }
        
        double perimeter = calculatePerimeter(x, y);
        double area = calculateArea(x, y);
        
        System.out.printf("%.2f\n", perimeter);
        System.out.printf("%.2f\n", area);
    }
    
    public static double calculatePerimeter(int[] x, int[] y) {
        double perimeter = 0;
        
        for (int i = 0; i < x.length - 1; i++) {
            perimeter += distance(x[i], y[i], x[i+1], y[i+1]);
        }
        
        perimeter += distance(x[x.length-1], y[x.length-1], x[0], y[0]);
        
        return perimeter;
    }
    
    public static double calculateArea(int[] x, int[] y) {
        double area = 0;
        
        for (int i = 0; i < x.length - 1; i++) {
            area += x[i] * y[i+1] - x[i+1] * y[i];
        }
        
        area += x[x.length-1] * y[0] - x[0] * y[x.length-1];
        
        return Math.abs(area) / 2;
    }
    
    public static double distance(int x1, int y1, int x2, int y2) {
        return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
    }
}
7.
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();

        int[] x = new int[n];
        int[] y = new int[n];

        for (int i = 0; i < n; i++) {
            x[i] = scanner.nextInt();
            y[i] = scanner.nextInt();
        }

        double perimeter = calculatePerimeter(x, y);
        double area = calculateArea(x, y);

        System.out.printf("%.2f\n", perimeter);
        System.out.printf("%.2f\n", area);
    }

    public static double calculatePerimeter(int[] x, int[] y) {
        double perimeter = 0;

        for (int i = 0; i < x.length - 1; i++) {
            perimeter += distance(x[i], y[i], x[i + 1], y[i + 1]);
        }

        perimeter += distance(x[x.length - 1], y[y.length - 1], x[0], y[0]);

        return perimeter;
    }

    public static double calculateArea(int[] x, int[] y) {
        double area = 0;

        for (int i = 0; i < x.length - 1; i++) {
            area += x[i] * y[i + 1] - x[i + 1] * y[i];
        }

        area += x[x.length - 1] * y[0] - x[0] * y[y.length - 1];

        return Math.abs(area) / 2;
    }

    public static double distance(int x1, int y1, int x2, int y2) {
        return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
    }
}
